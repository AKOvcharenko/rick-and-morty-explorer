name: Continuous Integration Workflow

on: push

defaults:
  run:
    shell: bash
    working-directory: ./src

jobs:
  test:
    name: 'Unit tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: 'Checkout repository'

      - name: 'Install dependency'
        run: npm ci

      - name: 'Run tests'
        run: npm run test-coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: 'Code lint'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: 'Checkout repository'

      - name: 'Install dependency'
        run: npm ci

      - name: 'Install dependency'
        run: npm run lint
  build:
    name: 'Build frontend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: 'Checkout repository'

      - name: 'Install dependency'
        run: npm ci

      - name: 'Install dependency'
        run: npm run build
  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Build image and push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          tags: |
            akovcharenko/rick-and-morty:${{ steps.commit.outputs.short }}
          push: true

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    name: Deploy
    needs: [test, build-and-push-docker-image] # Our tests and build-and-push must pass in order to run the deploy job
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
